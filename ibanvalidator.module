<?php
    require_once( 'includes/iban.php' );
    require_once( 'includes/es-ban.php' );
    require_once( 'includes/esban2iban.php' );

   /**
    * Implementation of hook_webform_validation_validators().
    */
    function ibanvalidator_webform_validation_validators() {
        return
            array(
                'validate_iban' => array(
                    'name' => 'Validate IBAN Check Digit',
                    'description' => t( 'Verifies that the user-entered check digit for an International Bank Account Number (IBAN) is correct.' ),
                    'component_types' => array( 'textfield', 'accountfield', 'select' ) ),

            	'validate_esban' => array(
                    'name' => 'Validate Spanish Check Digit',
                    'description' => t( 'Verifies that the user-entered check digit for an Spanish Bank Account Number is correct.' ),
                    'component_types' => array( 'textfield', 'entityfield', 'officefield', 'checkdigitfield', 'accountfield' ) )
             );
    }

   /**
    * Implementation of hook_webform_validation_validate().
    */
    function ibanvalidator_webform_validation_validate($validator_name, $items, $components, $rule ) {

        $ibanerror = 'La cuenta SEPA no es correcta. Revisa el número de cuenta entero, por favor.';
        $esbanerror = 'La cuenta corriente no es válida. Revisa el número de cuenta entero, por favor.';
        $errors = array();
      	if ( $items ) {
          switch ( $validator_name ) {
            case 'validate_iban':
      				    // Define one variable per field we want to check
      				    $countryid="";
      				    $country="";
      				    $entity="";
      				    $office="";
      				    $cc="";
      				    $account="";
      		        foreach ( $items as $key => $value ) {
          			      $component = $components[$key];
          						// Get the component class to take its value
          						$class_exp = explode(" ", $component["extra"]["css_classes"]);
                      $class = $class_exp[0];

                      switch( $class ) {
          							case "countryid":
          								$countryid = $value;
          								break;
          							case "country":
          								$country = $value;
          								break;
          							case "entity":
          								$entity = $value;
          								break;
          							case "office":
          								$office = $value;
          								break;
          							case "check":
          								$cc = $value;
          								break;
          							case "account":
          								$account = $value;
          								break;
          						}
		                }

                // If the SEPA part is empty, calculate it
                if( $country == '' || !isset($country) ){
                    //if ( !isValidAccountNumber( $entity, $office, $cc, $account ) ) {
                    if ( !ccc_valido($entity.$office.$cc.$account) ) {
                        $i=0;
                        // Mark the 5th box (dc) as an error
                        foreach( $items as $key => $value){
                            if($i==5){
                                $errors[$key] = t( $esbanerror,
                                    array( '%item' => $components[ $key ][ "name" ] ) );
                            }
                            $i++;
                        }
                    }

                }

                // If is SEPA, once we have all the parts, we put it together to get the entire IBAN number.
    				    $iban = $countryid."".$country."".$entity."".$office."".$cc."".$account;

                // Validamos el IBAN
    				    if( !isValidIban( $iban ) ){
    				    	$i=0;
    						// Mark the 5th box (dc) as an error
      						foreach( $items as $key => $value){
      							if($i==5){
      								$errors[$key] = t( $ibanerror,
      				                    array( '%item' => $components[ $key ][ "name" ] ) );
      							}
      							$i++;
      						}
    				    }
                return $errors;
                break;

                case 'validate_esban':
                    if ( count( $items ) == 4 ) {
                        $field_length = array(
                            "entity" => 4,
                            "office" => 4,
                            "CD" => 2,
                            "account" => 10
                        );

                        $field_key[] = array();
                        $field_value[] = array();
                        foreach ( $items as $key => $value ) {
                            $field_key[ $components[ $key ][ "form_key" ] ] = $key;

                            foreach ( $field_length as $field => $length ) {
                                if ( $components[ $key ][ "form_key" ] == $field ) {
                                     $field_value[ $field ] = $value;
                                }
                            }
                        }

                        foreach ( $field_length as $field => $length ) {
                            if ( !array_key_exists( $field, $field_value ) ) {
                                watchdog( t( "You must choose a %field field to validate", array( "%item" => $field ) ) );
                                break;
                            }
                        }

                        $account_is_empty = TRUE;
                        foreach ( $field_length as $field => $length ) {
                            if ( $field_value[ $field ] ) {
                                $account_is_empty = FALSE;
                            }
                        }

                        if ( !$account_is_empty ) {
                            foreach ( $field_length as $field => $length ) {
                                $key = $field_key[ $field ];
                                $value = $field_value[ $field ];

                                if ( !$value ) {
                                    $errors[ $field_key[ $field ] ] = t( '%item cant\'t be blank',
                                        array( '%item' => $components[ $key ][ "name" ] ) );

                                } elseif ( strlen( $value ) != $length ) {
                                    $errors[ $field_key[ $field ] ] = t( '%item must be %chars length',
                                        array(
                                            '%item' => $components[ $key ][ "name" ],
                                            '%chars' => $field_length[ $field ] ) );

                                } elseif ( !is_numeric( $value ) ) {
                                    $errors[ $field_key[ $field ] ] = t( '%item must be a string of numbers',
                                        array( '%item' => $components[ $key ][ "name" ] ) );
                                }
                            }

                            if ( !isValidAccountNumber(
                                $field_value[ "entity" ],
                                $field_value[ "office" ],
                                $field_value[ "CD" ],
                                $field_value[ "account" ] ) ) {
	                                $errors[ $field_key[ "CD" ] ] = t( '%item isn\'t the correct check digit. Please, review your account number',
	                                    array( '%item' => $components[ $field_key[ "CD" ] ][ "name" ] ) );
                            	  }
                        }
                    }
                    return $errors;
                    break;
            }
        }
    }
?>
