<?php

require_once('includes/iban.php');
require_once('includes/es-ban.php');
require_once('includes/esban2iban.php');

/**
 * Implementation of hook_webform_validation_validators().
 */
function ibanvalidator_webform_validation_validators()
{
    return [
        'validate_iban' => [
            'name' => 'Validate IBAN Check Digit',
            'description' => t('Verifies that the user-entered check digit for an International Bank Account Number (IBAN) is correct.'),
            'component_types' => ['textfield', 'accountfield', 'select'],
        ],
        'validate_esban' => [
            'name' => 'Validate Spanish Check Digit',
            'description' => t('Verifies that the user-entered check digit for an Spanish Bank Account Number is correct.'),
            'component_types' => ['textfield', 'entityfield', 'officefield', 'checkdigitfield', 'accountfield'],
        ],
        'validate_iban_unique' => [
            'name' => 'Validate IBAN account all in the same field',
            'description' => t('Verifies that the International Bank Account Number (IBAN) is correct.'),
            'component_types' => ['textfield'],
        ],
    ];
}

/**
 * Implementation of hook_webform_validation_validate().
 */
function ibanvalidator_webform_validation_validate($validator_name, $items, $components, $rule)
{
    $ibanerror = 'El IBAN que ha introducido no es correcto o está en un formato erróneo. Revísalo de nuevo, por favor.';
    $errors = [];

    if ($items) {
        switch ($validator_name) {
            case 'validate_iban':
                $countryid = "";
                $country = "";
                $entity = "";
                $office = "";
                $cc = "";
                $account = "";

                foreach ($items as $key => $value) {
                    $component = $components[$key];
                    $class_exp = explode(" ", $component["extra"]["css_classes"]);
                    $class = $class_exp[0];

                    switch($class) {
                        case "countryid":
                            $countryid = $value;
                            break;
                        case "country":
                            $country = $value;
                            break;
                        case "entity":
                            $entity = $value;
                            break;
                        case "office":
                            $office = $value;
                            break;
                        case "check":
                            $cc = $value;
                            break;
                        case "account":
                            $account = $value;
                            break;
                    }
                }

                if ($country == "" && $entity == "" && $office == "" && $cc == "" && $account == "") {
                    return $errors;
                    break;
                }

                if (isset($country) && $country <> '') {
                    $iban = $countryid."".$country."".$entity."".$office."".$cc."".$account;

                    if (!isValidIban($iban)) {
                        $i=0;

                        foreach ($items as $key => $value) {
                            if ($i==5) {
                                $errors[$key] = t(
                                    $ibanerror,
                                    array( '%item' => $components[ $key ][ "name" ] )
                                );
                            }
                            $i++;
                        }
                    }
                    return $errors;
                }

                break;

            case 'validate_iban_unique':
                $ibanerror = 'El IBAN que ha introducido no es correcto o está en un formato erróneo. Revísalo de nuevo, por favor.';
                $sizerror = 'El número de cuenta no tiene el formato o el número de dígitos correcto. Revísalo, por favor.';

                $iban = '';

                foreach ($items as $key => $value) {
                    $iban = str_replace("-", "", $value);
                    $iban = str_replace(" ", "", $iban);
                }

                if ($iban == "") {
                    return $errors;
                    break;
                }

                if (strlen($iban) == 24) {
                    if (!isValidIban($iban)) {
                        foreach ($items as $key => $value) {
                            $errors[$key] = t(
                                $ibanerror,
                                array( '%item' => $components[ $key ][ "name" ] )
                            );
                        }
                    }
                } else {
                    foreach ($items as $key => $value) {
                        $errors[$key] = t(
                            $sizerror,
                            array( '%item' => $components[ $key ][ "name" ] )
                        );
                    }
                }

                return $errors;

            case 'validate_esban':
                if (count($items) == 4) {
                    $field_length = array(
                        "entity" => 4,
                        "office" => 4,
                        "check" => 2,
                        "account" => 10
                    );

                    $field_key[] = array();
                    $field_value[] = array();
                    foreach ($items as $key => $value) {
                        $field_key[ $components[ $key ][ "form_key" ] ] = $key;

                        foreach ($field_length as $field => $length) {
                            if ($components[ $key ][ "form_key" ] == $field) {
                                $field_value[ $field ] = $value;
                            }
                        }
                    }

                    foreach ($field_length as $field => $length) {
                        if (!array_key_exists($field, $field_value)) {
                            watchdog(t("You must choose a %field field to validate", array( "%item" => $field )));
                            break;
                        }
                    }

                    $account_is_empty = true;
                    foreach ($field_length as $field => $length) {
                        if ($field_value[ $field ]) {
                            $account_is_empty = false;
                        }
                    }

                    if (!$account_is_empty) {
                        foreach ($field_length as $field => $length) {
                            $key = $field_key[ $field ];
                            $value = $field_value[ $field ];

                            if (!$value) {
                                $errors[ $field_key[ $field ] ] = t(
                                    '%item cant\'t be blank',
                                    array( '%item' => $components[ $key ][ "name" ] )
                                );
                            } elseif (strlen($value) != $length) {
                                $errors[ $field_key[ $field ] ] = t(
                                    '%item must be %chars length',
                                    array(
                                        '%item' => $components[ $key ][ "name" ],
                                        '%chars' => $field_length[ $field ] )
                                );
                            } elseif (!is_numeric($value)) {
                                $errors[ $field_key[ $field ] ] = t(
                                    '%item must be a string of numbers',
                                    array( '%item' => $components[ $key ][ "name" ] )
                                );
                            }
                        }

                        if (!isValidAccountNumber($field_value[ "entity" ], $field_value[ "office" ], $field_value[ "check" ], $field_value[ "account" ])
                            || !ccc_valido($field_value[ "entity" ], $field_value[ "office" ], $field_value[ "check" ]."".$field_value[ "account" ])
                        ) {
                            $errors[ $field_key[ "check" ] ] = t(
                                'Por favor revisa el número de cuenta',
                                array( '%item' => $components[ $field_key[ "check" ] ][ "name" ] )
                            );
                        }
                    }
                }
                return $errors;

                break;
        }
    }
}
